(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{168:function(e,t,a){e.exports=a.p+"ca1983dd6967bedbd42c75116d0e3e41.png"},169:function(e,t,a){e.exports=a.p+"68b354e6cb4f0a4cf88af24c05ae0c25.png"},268:function(e,t,a){"use strict";a.r(t);var o=[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",{staticClass:"content"},[o("h1",{attrs:{id:"relationships"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#relationships","aria-hidden":"true"}},[e._v("#")]),e._v(" Relationships")]),e._v(" "),o("p",[e._v("When creating a database, it’s often a good idea to separate different types of entities into different tables. For example: storing customers separate from orders. But we also need to have a connection between these two tables — otherwise, we wouldn’t know which customer placed a given order. These connections are called relationships, and they also need to be stored in the database.")]),e._v(" "),o("p",[e._v("There are multiple types of relationships in a relational database, which we’ll go over in a little more detail.")]),e._v(" "),o("h2",{attrs:{id:"one-to-many"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#one-to-many","aria-hidden":"true"}},[e._v("#")]),e._v(" One-to-Many")]),e._v(" "),o("p",[e._v("In relational databases, a one-to-many (O2M) relationship exists when an item of "),o("strong",[e._v("Collection A")]),e._v(" may be linked to many items of "),o("strong",[e._v("Collection B")]),e._v(", but an item of "),o("strong",[e._v("Collection B")]),e._v(" is linked to only one item of "),o("strong",[e._v("Collection A")]),e._v(". For example, directors have many movies, but a movie only has one director.")]),e._v(" "),o("p",[e._v("Now let's translate this to Directus interfaces. The "),o("code",[e._v("directors")]),e._v(" collection could have a multi-select listing of every movie (a O2M interface). However you could also view at this relationship in the opposite direction as a many-to-one (M2O), which would be a dropdown of directors on the "),o("code",[e._v("movies")]),e._v(" collection. So a O2M relationship is also a M2O (and vice versa)... it just depends on which way you look at it.")]),e._v(" "),o("p",[e._v('An easy way to remember which side is which: the "many" is an actual column that stores the foreign key, while the "one" side is a simulated column using the '),o("code",[e._v("ALIAS")]),e._v(" datatype.")]),e._v(" "),o("p",[o("img",{attrs:{src:a(168),alt:"O2M + M2O"}})]),e._v(" "),o("h2",{attrs:{id:"many-to-many"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#many-to-many","aria-hidden":"true"}},[e._v("#")]),e._v(" Many-to-Many")]),e._v(" "),o("p",[e._v("The many-to-many (M2M) is a slightly more advanced relationship that allows you to link "),o("em",[e._v("any")]),e._v(" items within "),o("strong",[e._v("Collection A")]),e._v(" and "),o("strong",[e._v("Collection B")]),e._v(". For example, movies can have many genres, and genres can have many movies.")]),e._v(" "),o("p",[e._v("Technically this is not a "),o("em",[e._v("new")]),e._v(' relationship type... it is a O2M and M2O working together across a "junction" collection. Each item in the junction (eg: '),o("code",[e._v("movies_genres")]),e._v(") is a single link between one item in "),o("code",[e._v("movies")]),e._v(" and one item in "),o("code",[e._v("genres")]),e._v(".")]),e._v(" "),o("p",[o("img",{attrs:{src:a(169),alt:"M2M"}})])])}],n=a(0),i=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},o,!1,null,null,null);i.options.__file="relationships.md";t.default=i.exports}}]);